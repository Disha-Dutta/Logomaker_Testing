{"remainingRequest":"/Users/decabits/Desktop/Logomaker_testing/Logomaker_Testing/node_modules/thread-loader/dist/cjs.js!/Users/decabits/Desktop/Logomaker_testing/Logomaker_Testing/node_modules/babel-loader/lib/index.js!/Users/decabits/Desktop/Logomaker_testing/Logomaker_Testing/node_modules/vuetify-loader/lib/loader.js??ref--18-0!/Users/decabits/Desktop/Logomaker_testing/Logomaker_Testing/node_modules/cache-loader/dist/cjs.js??ref--0-0!/Users/decabits/Desktop/Logomaker_testing/Logomaker_Testing/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/decabits/Desktop/Logomaker_testing/Logomaker_Testing/src/components/CreateLogo/SelectFont/index.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/decabits/Desktop/Logomaker_testing/Logomaker_Testing/src/components/CreateLogo/SelectFont/index.vue","mtime":1589799857282},{"path":"/Users/decabits/Desktop/Logomaker_testing/Logomaker_Testing/node_modules/cache-loader/dist/cjs.js","mtime":1587646814657},{"path":"/Users/decabits/Desktop/Logomaker_testing/Logomaker_Testing/node_modules/thread-loader/dist/cjs.js","mtime":1587646814737},{"path":"/Users/decabits/Desktop/Logomaker_testing/Logomaker_Testing/node_modules/babel-loader/lib/index.js","mtime":1585042396718},{"path":"/Users/decabits/Desktop/Logomaker_testing/Logomaker_Testing/node_modules/vuetify-loader/lib/loader.js","mtime":1587646826120},{"path":"/Users/decabits/Desktop/Logomaker_testing/Logomaker_Testing/node_modules/cache-loader/dist/cjs.js","mtime":1587646814657},{"path":"/Users/decabits/Desktop/Logomaker_testing/Logomaker_Testing/node_modules/vue-loader/lib/index.js","mtime":1587646822154}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:aW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMuYXJyYXkuZmlsdGVyIjsKLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KaW1wb3J0IExvZ28gZnJvbSAnLi4vLi4vLi4vbW9kZWxzL2xvZ28nOwppbXBvcnQgdGV4dEpzb24gZnJvbSAnLi4vLi4vLi4vY29tbW9uL2RhdGEvZm9udHMuanNvbic7CmltcG9ydCBjbXNKc29uIGZyb20gJy4uLy4uLy4uL2NvbW1vbi9kYXRhL21lc3NhZ2VzLmpzb24nOwppbXBvcnQgY2hhclV0aWwgZnJvbSAnLi4vLi4vLi4vdXRpbHMvY2hhclV0aWwnOwpleHBvcnQgZGVmYXVsdCB7CiAgbmFtZTogJ0hlbGxvV29ybGQnLAogIGRhdGE6IGZ1bmN0aW9uIGRhdGEoKSB7CiAgICByZXR1cm4gewogICAgICB3aWR0aDogJzMzJScsCiAgICAgIGZvbnRJdGVtczogdGV4dEpzb24sCiAgICAgIGNtczogY21zSnNvbi5zZWxlY3RGb250LAogICAgICBjYXJkR3JpZDogY2hhclV0aWwuZ2V0R3JpZFNpemUoKQogICAgfTsKICB9LAogIHByb3BzOiB7CiAgICBjdXJyZW50TG9nb09iajogewogICAgICB0eXBlOiBPYmplY3QKICAgIH0KICB9LAogIG1ldGhvZHM6IHsKICAgIGNoYW5nZUZvbnQ6IGZ1bmN0aW9uIGNoYW5nZUZvbnQoZm9udCwgZm9udElkKSB7CiAgICAgIHZhciBsb2dvID0gTG9nby5pbnN0YW5jZTsKICAgICAgbG9nby5mb250ID0gZm9udDsKICAgICAgbG9nby5mb250SWQgPSBmb250SWQ7CiAgICAgIGxvZ28uc2F2ZSgpOwogICAgfSwKICAgIHNlbGVjdEZvbnQ6IGZ1bmN0aW9uIHNlbGVjdEZvbnQoaWQpIHsKICAgICAgdmFyIGFycmF5ID0gdGhpcy5mb250SXRlbXM7CiAgICAgIHZhciBzbGVjdGVkQXJyYXkgPSBhcnJheS5maWx0ZXIoZnVuY3Rpb24gKGUpIHsKICAgICAgICByZXR1cm4gZS5pZCA9PSBpZDsKICAgICAgfSk7CiAgICAgIHZhciBmb250ID0gc2xlY3RlZEFycmF5WzBdLmZvbnQ7CiAgICAgIHRoaXMuY2hhbmdlSWNvbihmb250LCBpZCk7CiAgICB9CiAgfQp9Ow=="},{"version":3,"sources":["index.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAsCA,OAAA,IAAA,MAAA,sBAAA;AACA,OAAA,QAAA,MAAA,iCAAA;AACA,OAAA,OAAA,MAAA,oCAAA;AACA,OAAA,QAAA,MAAA,yBAAA;AAEA,eAAA;AACA,EAAA,IAAA,EAAA,YADA;AAEA,EAAA,IAAA,EAAA;AAAA,WAAA;AACA,MAAA,KAAA,EAAA,KADA;AAEA,MAAA,SAAA,EAAA,QAFA;AAGA,MAAA,GAAA,EAAA,OAAA,CAAA,UAHA;AAIA,MAAA,QAAA,EAAA,QAAA,CAAA,WAAA;AAJA,KAAA;AAAA,GAFA;AAQA,EAAA,KAAA,EAAA;AACA,IAAA,cAAA,EAAA;AACA,MAAA,IAAA,EAAA;AADA;AADA,GARA;AAaA,EAAA,OAAA,EAAA;AACA,IAAA,UADA,sBACA,IADA,EACA,MADA,EACA;AACA,UAAA,IAAA,GAAA,IAAA,CAAA,QAAA;AACA,MAAA,IAAA,CAAA,IAAA,GAAA,IAAA;AACA,MAAA,IAAA,CAAA,MAAA,GAAA,MAAA;AACA,MAAA,IAAA,CAAA,IAAA;AACA,KANA;AAOA,IAAA,UAPA,sBAOA,EAPA,EAOA;AACA,UAAA,KAAA,GAAA,KAAA,SAAA;AACA,UAAA,YAAA,GAAA,KAAA,CAAA,MAAA,CAAA,UAAA,CAAA;AAAA,eAAA,CAAA,CAAA,EAAA,IAAA,EAAA;AAAA,OAAA,CAAA;AACA,UAAA,IAAA,GAAA,YAAA,CAAA,CAAA,CAAA,CAAA,IAAA;AACA,WAAA,UAAA,CAAA,IAAA,EAAA,EAAA;AACA;AAZA;AAbA,CAAA","sourcesContent":["<template>\n  <div>\n    <v-container fluid class=\"pt-12 mt-12\">\n      <v-row>\n        <v-col md=\"4\">\n          <div style=\"position: fixed;\" :style=\"{'width': width}\">\n            <v-select\n              @change=\"selectFont(currentLogoObj.fontId)\"\n              v-model=\"currentLogoObj.fontId\"\n              :items=\"fontItems\"\n              item-text=\"fontName\"\n              item-value=\"id\"\n              :value=\"currentLogoObj.fontId\"\n              :label=\"cms.previewComponent.label\"  \n            >\n            </v-select>\n            <div class=\"logo-text__preview-dark\" >\n              <h2 class=\"logo-text__preview-text\" :style=\"{fontFamily:currentLogoObj.font}\">{{currentLogoObj.name}}</h2>\n            </div>\n            <div class=\"logo-text__preview-light\">\n              <h2 class=\"logo-text__preview-text\"  :style=\"{fontFamily:currentLogoObj.font}\">{{currentLogoObj.name}}</h2>\n            </div>\n          </div>\n        </v-col>\n        <v-col md=\"8\">\n          <v-col :md=\"cardGrid\" v-for=\"(item, i) in fontItems\" :key=\"i\" style=\"float:left\" >\n            <div :style=\"{fontFamily:item.fontFamily}\" @click=\"changeFont(item.fontFamily, item.id)\" class=\"logo-text__font-selection-cards\">\n              <div :class=\"{'logo-text__font-selection-cards-indicators' : currentLogoObj.fontId === item.id }\"></div>\n              <h2 class=\"logo-text__preview-text\" >{{currentLogoObj.name}}</h2>\n            </div>\n          </v-col>\n        </v-col>\n      </v-row>\n    </v-container>\n  </div>\n</template>\n\n<script>\n  import Logo from '../../../models/logo'\n  import textJson from '../../../common/data/fonts.json'\n  import cmsJson from '../../../common/data/messages.json'\n  import charUtil from '../../../utils/charUtil'\n\n  export default {\n    name: 'HelloWorld',\n    data: () => ({\n      width: '33%',\n      fontItems: textJson,\n      cms: cmsJson.selectFont,\n      cardGrid: charUtil.getGridSize()\n    }),\n    props: {\n      currentLogoObj : {\n        type : Object\n      }\n    },\n    methods: {\n      changeFont(font, fontId){\n        const logo = Logo.instance;\n        logo.font = font;\n        logo.fontId = fontId;\n        logo.save();\n      },\n      selectFont(id){\n        let array = this.fontItems\n        let slectedArray = array.filter((e) => e.id == id )\n        const font = slectedArray[0].font;\n        this.changeIcon(font, id)\n      }\n          \n    },\n\n  };\n\n</script>\n\n<style lang=\"scss\" scoped>\n  @import './selectFont.scss'\n\n</style>\n"],"sourceRoot":"src/components/CreateLogo/SelectFont"}]}